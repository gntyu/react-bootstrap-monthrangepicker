'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var $ = _interopDefault(require('jquery'));
var PropTypes = _interopDefault(require('prop-types'));
require('bootstrap-monthrangepicker');

/* generated by gulpfile.js */

var getOptions = (function () {
  return ['<input>', 'alwaysShowCalendars', 'applyClass', 'autoApply', 'autoUpdateInput', 'buttonClasses', 'cancelClass', 'dateLimit', 'drops', 'endDate', 'isCustomDate', 'isInvalidDate', 'linkedCalendars', 'locale', 'maxDate', 'minDate', 'opens', 'parentEl', 'ranges', 'showCustomRangeLabel', 'showDropdowns', 'showISOWeekNumbers', 'showWeekNumbers', 'singleDatePicker', 'startDate', 'template', 'timePicker', 'timePicker24Hour', 'timePickerIncrement', 'timePickerSeconds', 'monthOrQuarter'];
});

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var ReactMonthRange = function (_Component) {
  inherits(ReactMonthRange, _Component);

  function ReactMonthRange(props) {
    classCallCheck(this, ReactMonthRange);

    var _this = possibleConstructorReturn(this, (ReactMonthRange.__proto__ || Object.getPrototypeOf(ReactMonthRange)).call(this, props));

    _this.$mpicker = null;
    _this.options = getOptions();
    return _this;
  }

  createClass(ReactMonthRange, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      // initialize
      this.$mpicker.monthrangepicker(this.getOptionsFromProps());
      // attach event listeners
      ['Show', 'Hide', 'ShowCalendar', 'HideCalendar', 'Apply', 'Cancel'].forEach(function (event) {
        var lcase = event.toLowerCase();
        _this2.$mpicker.on(lcase + '.daterangepicker', _this2.makeEventHandler('on' + event));
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var currentOptions = this.getOptionsFromProps();
      var nextOptions = this.getOptionsFromProps(nextProps);
      var changedOptions = {};
      this.options.forEach(function (option) {
        if (currentOptions[option] !== nextOptions[option]) {
          changedOptions[option] = nextOptions[option];
        }
      });
      this.setOptionsFromProps(changedOptions);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.$mpicker && this.$mpicker.data('daterangepicker')) {
        this.$mpicker.data('daterangepicker').remove();
      }
    }
  }, {
    key: 'makeEventHandler',
    value: function makeEventHandler(eventType) {
      var _this3 = this;

      var onEvent = this.props.onEvent;

      return function (event, picker) {
        if (typeof onEvent === 'function') {
          onEvent(event, picker);
        }
        if (typeof _this3.props[eventType] === 'function') {
          _this3.props[eventType](event, picker);
        }
      };
    }
  }, {
    key: 'getOptionsFromProps',
    value: function getOptionsFromProps(props) {
      var options = void 0;
      props = props || this.props;
      this.options.forEach(function (option) {
        if (props.hasOwnProperty(option)) {
          options = options || {};
          options[option] = props[option];
        }
      });
      return options || {};
    }
  }, {
    key: 'setOptionsFromProps',
    value: function setOptionsFromProps(currentOptions) {
      var _this4 = this;

      var keys = Object.keys(currentOptions);
      keys.forEach(function (key) {
        if (key === 'startDate') {
          _this4.$mpicker.data('daterangepicker').setStartDate(currentOptions[key]);
        } else if (key === 'endDate') {
          _this4.$mpicker.data('daterangepicker').setEndDate(currentOptions[key]);
        } else {
          _this4.$mpicker.data('daterangepicker')[key] = currentOptions[key];
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var _props = this.props,
          children = _props.children,
          containerStyles = _props.containerStyles,
          containerClass = _props.containerClass;

      return React__default.createElement(
        'div',
        {
          ref: function ref(mpicker) {
            _this5.$mpicker = $(mpicker);
          },
          className: containerClass,
          style: containerStyles
        },
        children
      );
    }
  }]);
  return ReactMonthRange;
}(React.Component);

ReactMonthRange.defaultProps = {
  containerClass: 'react-bootstrap-daterangepicker-container',
  containerStyles: {
    display: 'inline-block'
  }
};

ReactMonthRange.propTypes = {
  '<input>': PropTypes.any,
  alwaysShowCalendars: PropTypes.bool,
  applyClass: PropTypes.string,
  autoApply: PropTypes.bool,
  autoUpdateInput: PropTypes.bool,
  buttonClasses: PropTypes.array,
  cancelClass: PropTypes.string,
  children: PropTypes.node.isRequired,
  containerClass: PropTypes.string,
  containerStyles: PropTypes.object,
  dateLimit: PropTypes.object,
  drops: PropTypes.oneOf(['down', 'up']),
  endDate: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  isCustomDate: PropTypes.func,
  isInvalidDate: PropTypes.func,
  linkedCalendars: PropTypes.bool,
  locale: PropTypes.object,
  maxDate: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  minDate: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  onApply: PropTypes.func,
  onCancel: PropTypes.func,
  onEvent: PropTypes.func,
  onHide: PropTypes.func,
  onHideCalendar: PropTypes.func,
  onShow: PropTypes.func,
  onShowCalendar: PropTypes.func,
  opens: PropTypes.oneOf(['left', 'right', 'center']),
  parentEl: PropTypes.any,
  ranges: PropTypes.object,
  showCustomRangeLabel: PropTypes.bool,
  showDropdowns: PropTypes.bool,
  showISOWeekNumbers: PropTypes.bool,
  showWeekNumbers: PropTypes.bool,
  singleDatePicker: PropTypes.bool,
  startDate: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  template: PropTypes.any,
  timePicker: PropTypes.bool,
  timePickerIncrement: PropTypes.number,
  timePicker24Hour: PropTypes.bool,
  timePickerSeconds: PropTypes.bool,
  monthOrQuarter: PropTypes.number
};

exports.ReactMonthRange = ReactMonthRange;
exports.default = ReactMonthRange;
